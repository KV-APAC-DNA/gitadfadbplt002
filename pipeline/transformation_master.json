{
	"name": "transformation_master",
	"properties": {
		"activities": [
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": 0,
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit failure on exec pipeline",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "for each sequence",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": 0,
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "for each sequence",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get sequences",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get sequences').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "check sequence status",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('issequencefailed')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "exec transform sequence",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "transformation_sequence",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"sequence_id": {
													"value": "@item().sequence_id",
													"type": "Expression"
												},
												"usecase_id": {
													"value": "@pipeline().parameters.usecase_id",
													"type": "Expression"
												},
												"phase_id": {
													"value": "@pipeline().parameters.phase_id",
													"type": "Expression"
												},
												"category": {
													"value": "@pipeline().parameters.category",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "set to failed",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "exec transform sequence",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "issequencefailed",
											"value": true
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "get sequences",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "check if sequence failed",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "for each sequence",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('issequencefailed')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "audit success",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_audit_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": 0,
									"status": "FINISH",
									"input_row_count": 0,
									"output_row_count": 0,
									"jobname": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"message": {
										"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
										"type": "Expression"
									},
									"runid": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipeline_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "audit failure on loop",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_audit_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": 0,
									"status": "FAIL",
									"input_row_count": 0,
									"output_row_count": 0,
									"jobname": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"message": {
										"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
										"type": "Expression"
									},
									"runid": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipeline_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "fail this pipeline",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "audit failure on loop",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Transformation Master failed for @{pipeline().parameters.usecase_id}",
									"type": "Expression"
								},
								"errorCode": "1020"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			}
		},
		"variables": {
			"output_variable": {
				"type": "String"
			},
			"dbt-result": {
				"type": "String"
			},
			"sequence_id": {
				"type": "Integer"
			},
			"Isunknown": {
				"type": "Boolean"
			},
			"adls_container": {
				"type": "String"
			},
			"folder_path": {
				"type": "String"
			},
			"target_table": {
				"type": "String"
			},
			"target_schema": {
				"type": "String"
			},
			"file_spec": {
				"type": "String"
			},
			"stage": {
				"type": "String"
			},
			"file_format": {
				"type": "String"
			},
			"issequencefailed": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"folder": {
			"name": "Transformation"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T19:45:20Z"
	}
}
{
	"name": "s3_adls_child",
	"properties": {
		"activities": [
			{
				"name": "ForEach2",
				"type": "ForEach",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.s3_file",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "if_file_exists",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "s3_source_binary",
									"type": "DatasetReference",
									"parameters": {
										"bucket": {
											"value": "@pipeline().parameters.s3_bucket",
											"type": "Expression"
										},
										"path": {
											"value": "@{pipeline().parameters.s3_path}",
											"type": "Expression"
										},
										"file": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.last_modified",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "Switch1",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "if_file_exists",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@if(\n    and(\n        equals(pipeline().parameters.delete_from_source, 'Y'),\n        equals(activity('if_file_exists').output.exists, true)\n    ),\n    'move_and_delete', \n    if(\n        and(\n            equals(pipeline().parameters.delete_from_source, 'N'),\n            equals(activity('if_file_exists').output.exists, true)\n        ),\n        'move_and_donot_delete',  \n        'DefaultResult'\n    )\n)",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "move_and_delete",
										"activities": [
											{
												"name": "s3_to_adls_delete_source_file",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AmazonS3ReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "s3_source_binary",
														"type": "DatasetReference",
														"parameters": {
															"bucket": {
																"value": "@pipeline().parameters.s3_bucket",
																"type": "Expression"
															},
															"path": {
																"value": "@pipeline().parameters.s3_path",
																"type": "Expression"
															},
															"file": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "adls_sink_binary",
														"type": "DatasetReference",
														"parameters": {
															"adls_container": {
																"value": "@pipeline().parameters.adls_container",
																"type": "Expression"
															},
															"adls_path": {
																"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.adls_path}",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									},
									{
										"value": "move_and_donot_delete",
										"activities": [
											{
												"name": "s3_to_adls_donot_delete_source_file",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AmazonS3ReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "s3_source_binary",
														"type": "DatasetReference",
														"parameters": {
															"bucket": {
																"value": "@pipeline().parameters.s3_bucket",
																"type": "Expression"
															},
															"path": {
																"value": "@pipeline().parameters.s3_path",
																"type": "Expression"
															},
															"file": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "adls_sink_binary",
														"type": "DatasetReference",
														"parameters": {
															"adls_container": {
																"value": "@pipeline().parameters.adls_container",
																"type": "Expression"
															},
															"adls_path": {
																"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.adls_path}",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"s3_bucket": {
				"type": "string"
			},
			"s3_path": {
				"type": "string"
			},
			"s3_file": {
				"type": "array"
			},
			"adls_container": {
				"type": "string"
			},
			"adls_path": {
				"type": "string"
			},
			"last_modified": {
				"type": "string"
			},
			"delete_from_source": {
				"type": "string"
			}
		},
		"folder": {
			"name": "Miscellaneous Pipelines/s3_to_adls"
		},
		"annotations": []
	}
}